public class Solution {
    public boolean isPalindrome(String s) {
        // Preprocess the string: remove non-alphanumeric characters and convert to lowercase
        StringBuilder filteredString = new StringBuilder();
        
        // Iterate over each character in the input string
        for (char c : s.toCharArray()) {
            // Check if the character is alphanumeric
            if (Character.isLetterOrDigit(c)) {
                // Append the lowercase version of the character to the StringBuilder
                filteredString.append(Character.toLowerCase(c));
            }
        }

        // Convert the filtered StringBuilder to a String
        String processed = filteredString.toString();
        int i = 0; // Pointer for the start of the string
        int j = processed.length() - 1; // Pointer for the end of the string

        // Two-pointer approach to check for palindrome
        while (i < j) {
            // Compare characters at the two pointers
            if (processed.charAt(i) != processed.charAt(j)) {
                return false; // Mismatch found, not a palindrome
            }
            i++; // Move the left pointer to the right
            j--; // Move the right pointer to the left
        }
        
        return true; // No mismatches found, it is a palindrome
    }

   
}
