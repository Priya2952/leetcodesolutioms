class Solution {
    public int nthRoot(int n, int m) {
       int low = 1;
        int high = m;

        // Perform binary search
        while (low <= high) {
            int mid = low + (high - low) / 2;
            long midPower = power(mid, n); // Calculate mid^n

            // Check if mid^n equals m
            if (midPower == m) {
                return mid; // Found the nth root
            } else if (midPower < m) {
                low = mid + 1; // Search in the higher range
            } else {
                high = mid - 1; // Search in the lower range
            }
        }

        // If no integer nth root exists, return -1
        return -1;
    }

    // Helper function to calculate base^exp
    private static long power(int base, int exp) {
        long result = 1;
        for (int i = 0; i < exp; i++) {
            result *= base;
            if (result > Long.MAX_VALUE) { // Avoid overflow
                return Long.MAX_VALUE;
            }
        }
        return result;
    }
    
}
