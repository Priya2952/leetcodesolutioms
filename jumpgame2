class Solution {
    public int jump(int[] nums) {
         int n = nums.length;

        // If the array has only one element, no jumps are needed
        if (n == 1) {
            return 0;
        }

        // Initialize variables
        int jumps = 0;  // Number of jumps made so far
        int currentEnd = 0;  // The farthest index we can reach with the current number of jumps
        int farthest = 0;  // The farthest index we can reach in the next step

        // Traverse the array up to the second-to-last element
        for (int i = 0; i < n - 1; i++) {
            // Update the farthest we can reach from the current position
            farthest = Math.max(farthest, i + nums[i]);

            // If we've reached the end of the current jump, we need to make another jump
            if (i == currentEnd) {
                jumps++;
                currentEnd = farthest;

                // If the currentEnd reaches or exceeds the last index, break the loop
                if (currentEnd >= n - 1) {
                    break;
                }
            }
        }

        return jumps;
    }
        
    
}
