class Solution {
    // Function to sort an array using quick sort algorithm.
    static void quickSort(int arr[], int low, int high) {
        if (low < high) {
            // Partition the array and get the pivot index.
            int pi = partition(arr, low, high);

            // Recursively sort elements before and after the partition.
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    static int partition(int arr[], int low, int high) {
               int pivot = arr[high];
              int i = low - 1; 
       
             for (int j = low; j < high; j++) {
            // If the current element is less than or equal to the pivot.
            if (arr[j] <= pivot) {
                i++; // Increment index of smaller element.
                // Swap arr[i] and arr[j].
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i + 1] and arr[high] (pivot).
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1; // Return the partitioning index.
    }
} 
