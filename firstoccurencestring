public class Solution {
    public int strStr(String haystack, String needle) {
        // If needle is an empty string, return 0
        if (needle.isEmpty()) {
            return 0;
        }

        // Loop through the haystack
        for (int i = 0; i <= haystack.length() - needle.length(); i++) {
            // Check if the current character matches the first character of needle
            if (haystack.charAt(i) == needle.charAt(0)) {
                int j = 0; // Pointer for needle
                int k = i; // Pointer for haystack
                
                // While loop to check if the substring matches the needle
                while (j < needle.length() && k < haystack.length() && needle.charAt(j) == haystack.charAt(k)) {
                    j++;
                    k++;
                }
                
                // If we've matched the entire needle, return the starting index
                if (j == needle.length()) {
                    return i; // Return the starting index where needle is found
                }
            }
        }
        
        // If no match found, return -1
        return -1;
    }

} 
