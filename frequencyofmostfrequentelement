import java.util.Arrays;

public class MaxFrequency {
    public int maxFrequency(int[] nums, int k) {
        // Step 1: Sort the array
        Arrays.sort(nums);
        
        int n = nums.length;
        long total = 0; // To keep track of the sum of the window
        int start = 0;  // Left pointer of the sliding window
        int maxFreq = 0;

        // Step 2: Sliding window
        for (int end = 0; end < n; end++) {
            // Add current number to the total
            total += nums[end];

            // Check if the window is valid
            while ((long) nums[end] * (end - start + 1) > total + k) {
                // If not valid, shrink the window from the left
                total -= nums[start];
                start++;
            }

            // Update the maximum frequency
            maxFreq = Math.max(maxFreq, end - start + 1);
        }

        return maxFreq;
    }

    public static void main(String[] args) {
        MaxFrequency solution = new MaxFrequency();

        // Example test cases
        int[] nums1 = {1, 2, 4};
        int k1 = 5;
        System.out.println(solution.maxFrequency(nums1, k1)); // Output: 3

        int[] nums2 = {1, 4, 8, 13};
        int k2 = 5;
        System.out.println(solution.maxFrequency(nums2, k2)); // Output: 2

        int[] nums3 = {3, 9, 6};
        int k3 = 2;
        System.out.println(solution.maxFrequency(nums3, k3)); // Output: 1
    }
}
